#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\date{}
\end_preamble
\use_default_options false
\master guida.lyx
\maintain_unincluded_children true
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Indice
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Per-iniziare"

\end_inset

Per iniziare
\end_layout

\begin_layout Quotation

\emph on
\begin_inset Quotes eld
\end_inset

Non fatevi prendere dal panico.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quotation
\align right

\shape italic
Douglas Adams
\shape default
, Guida galattica per autostoppisti.
\end_layout

\begin_layout Standard
La prima cosa necessaria per affrontare una gara è conoscere la struttura
 dei problemi proposti, che è abbastanza costante a tutti i livelli e tra
 tutte le gare online, almeno come idea generale.
 Come esempio vediamo un testo delle territoriali, precisamente il problema
 
\emph on
nimbus
\emph default
 delle territoriali 2007, mostrato 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "subsec:Giri-sulla-Scopa"

\end_inset

.
 Guardiamo quali sono gli elementi che ne contraddistinguono la struttura
 e il loro significato:
\end_layout

\begin_layout Itemize

\series bold
Titolo
\series default
: nella prima riga c'è un titolo lungo (Giri sulla scopa Nimbus3000) e uno
 breve (nimbus).
 Il titolo lungo serve solo per 
\begin_inset Quotes eld
\end_inset

folklore
\begin_inset Quotes erd
\end_inset

, in modo da dare un indizio della storia che seguirà, mentre quello breve
 può esserci o meno, di solito è il nome che compare nel tabellone dei punteggi,
 non è rilevante al fine della comprensione e soluzione del problema.
\end_layout

\begin_layout Itemize

\series bold
Difficoltà
\series default
: può esserci o non esserci, se è presente ha un duplice scopo.
 Da una parte permette a chi sta svolgendo la prova di capire quale esercizio
 è più semplice e orientarsi di conseguenza (ad esempio partendo prima dalla
 soluzione dell'esercizio più semplice), dall'altra è il coefficiente che
 viene utilizzato nel meccanismo di valutazione mostrato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-di-valutazione"

\end_inset

, quindi gli esercizi con difficoltà più alta danno un punteggio maggiore,
 se risolti correttamente
\begin_inset Foot
status open

\begin_layout Plain Layout
Questa non è una regola, dipende da come viene steso il regolamento di anno
 in anno
\end_layout

\end_inset

.
 Pur essendo un parametro oggettivo, che quindi rispecchia piuttosto esattamente
 la difficoltà di ogni problema, può essere che soggettivamente la valutazione
 di ogni singolo problema possa essere diversa.
 In questo caso viene posto anche un tempo limite di esecuzione, cioè il
 tempo massimo entro il quale il programma sottoposto deve dare una risposta
 al caso di test da risolvere, il cui scopo verrà meglio spiegato nel capitolo
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Complessità-computazionale"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Descrizione del problema
\series default
: tutti i problemi, a qualsiasi livello, vengono presentati attraverso una
 
\begin_inset Quotes eld
\end_inset

storiella
\begin_inset Quotes erd
\end_inset

 di fantasia, che spiega quale tipo di problema bisogna risolvere attraverso
 una prosa in generale leggera e di facile comprensione.
 Lo scopo di questa spiegazione è quello di chiarire, con un linguaggio
 il più semplice e chiaro possibile, qual è lo scopo dell'algoritmo che
 bisogna progettare.
 Pur con questi obbiettivi non sempre lo scopo viene raggiunto pienamente,
 quindi anche dopo averla letta possono rimanere dei dubbi sulla comprensione
 esatta del testo, cosa che è fondamentale per poter avere almeno la possibilità
 di arrivare alla soluzione corretta del problema (è ovvio che se non si
 è capito il testo sarà impossibile arrivare a una soluzione corretta).
 Per evitare questo problema si vedrà poi che vengono aggiunti ulteriori
 
\begin_inset Quotes eld
\end_inset

indizi
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
Dati di input
\series default
: come già detto la valutazione avverrà dando in pasto al programma dei
 casi di test che servono a rappresentare un'istanza specifica del problema
 ed è quindi necessario specificare esattamente cosa dovrà aspettarsi il
 vostro programma, per permettere al programmatore di acquisire correttamente
 i dati da elaborare.
 Questo punto e quello successivo verranno trattati in modo approfondito
 nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Input/output"

\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
Dati di output
\series default
: anche qui, sempre per le considerazioni espresse al punto precedente,
 viene spiegato l'esatto formato della risposta che dovrà fornire il programma.
\end_layout

\begin_layout Itemize

\series bold
Esempi di input/output
\series default
: questa sezione è molto utile per verificare se la descrizione del problema
 è stata compresa correttamente o, nel caso che non la si sia compresa,
 per arrivare a una comprensione esatta del problema.
 Attraverso una tabella vengono fornite una o più istanze (in questo caso
 una sola) di casi di test del problema, tramite i casi di input (nella
 colonna input.txt) e le relative soluzioni (nella colonna output.txt).
\end_layout

\begin_layout Itemize

\series bold
Nota/e
\series default
: quest'ultima sezione contiene delle note di vario genere relative o al
 problema o ai meccanismi di attribuzione del punteggio (come in questo
 caso).
 A volte non è presente.
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Giri-sulla-Scopa"

\end_inset

Giri sulla Scopa Nimbus3000 (nimbus) 
\end_layout

\begin_layout Subsubsection*
Difficoltà D = 2 (tempo limite 1 sec).
 
\end_layout

\begin_layout Subsubsection*
Descrizione del problema
\end_layout

\begin_layout Plain Layout
Al celebre maghetto Harry Potter è stata regalata una scopa volante modello
 Nimbus3000 e tutti i suoi compagni del Grifondoro gli chiedono di poterla
 provare.
 Il buon Harry ha promesso che nei giorni a venire soddisferà le richieste
 di tutti, ma ogni ragazzo è impaziente e vuole provare la scopa il giorno
 stesso.
 Ognuno propone ad Harry un intervallo di tempo della giornata durante il
 quale, essendo libero da lezioni di magia, può fare un giro sulla scopa,
 e per convincerlo gli offre una fantastica caramella Tuttigusti+1.
 Tenendo presente che una sola persona alla volta può salire sulla Nimbus3000
 in ogni istante di tempo, Harry decide di soddisfare, tra tutte le richieste
 dei ragazzi, quelle che gli procureranno la massima quantità di caramelle
 (che poi spartirà coi suoi amici Ron e Hermione).
 Aiutalo a trovare la migliore soluzione possibile.
 
\end_layout

\begin_layout Subsubsection*
Dati di input
\end_layout

\begin_layout Plain Layout
Il file input.txt contiene nella prima riga un intero positivo N, che indica
 il numero di richieste, che sono numerate da 1 a N.
 Ognuna delle successive N righe contiene una coppia di interi.
 Ciascuna di tali righe contiene una coppia di interi positivi A e B, separati
 da uno spazio, a rappresentare la richiesta di poter utilizzare la scopa
 dall'istante iniziale A fino all'istante finale B, in cambio di una caramella
 (dove A < B).
 A tal fine, il tempo è diviso in istanti discreti numerati a partire da
 1 in poi.
 
\end_layout

\begin_layout Subsubsection*
Dati di output
\end_layout

\begin_layout Plain Layout
Il file output.txt è composto da una riga contenente un solo intero, che
 rappresenta il massimo numero di caramelle che Harry può ottenere.
 Assunzioni
\end_layout

\begin_layout Plain Layout
1 < N < 1000 Gli interi nelle N coppie sono distinti l'uno dall'altro (non
 esistono due interi uguali, anche in coppie diverse).
\end_layout

\begin_layout Subsubsection*
Esempi di input/output
\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="bottom" width="1in">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File input.txt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File output.txt
\end_layout

\end_inset
</cell>
</row>
<row topspace="default" bottomspace="default" interlinespace="default">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\begin_layout Plain Layout
1 5
\end_layout

\begin_layout Plain Layout
3 7
\end_layout

\begin_layout Plain Layout
9 11
\end_layout

\begin_layout Plain Layout
10 12 
\end_layout

\begin_layout Plain Layout
6 13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Nota/e
\end_layout

\begin_layout Plain Layout
Un programma che restituisce sempre lo stesso valore, indipendentemente
 dai dati in input.txt, non totalizza alcun punteggio rilevante.
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Nuova-mod_sottoposizione"

\end_inset

Modalità di sottomissione delle soluzioni
\end_layout

\begin_layout Standard
Una volta compreso il problema e scritta la soluzione, si spera corretta,
 è necessario inviarla perchè venga valutata.
 Il meccanismo esatto è stato modificato negli anni, qui verrà presentato
 quello attuale, ma l'idea generale è sempre la stessa: scrivere un codice
 che risolva un problema e sottoporgli una serie di casi di test che deve
 risolvere.
\end_layout

\begin_layout Standard
A differenza di buona parte dei correttori online, che prevedono che venga
 inviato il codice sorgente sul server e che lì avvenga la compilazione,
 l'esecuzione e l'assegnazione dei punteggi, dal 2018 il metodo usato alle
 selezioni territoriali utilizza un meccanismo già presente in altre competizion
i, ad esempio 
\begin_inset CommandInset href
LatexCommand href
name "Google Code Jam"
target "https://code.google.com/codejam/"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
L'idea di base è quella di dare allo studente un file di input contenente
 tutti i test case e permettergli di creare, tramite il proprio programma,
 un file di output con tutte le risposte.
 
\end_layout

\begin_layout Standard
Il file di input che l'utente dovrà scaricare sarà fatto ad esempio in questo
 modo e dovrà produrre un file di output strutturalmente simile a quello
 mostrato:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../materiali/per_iniziare/nuova_sottomissione.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Modalità di sottoposizione
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Successivamente il file di output verrà caricato sul server che risponderà
 con il numero di punti ottenuti, indicando anche quali test case hanno
 avuto una risposta corretta e quali no.
\begin_inset Foot
status open

\begin_layout Plain Layout
Al momento della scrittura di questo paragrafo (01/03/2023) esiste una piattafor
ma di prova all'indirizzo 
\begin_inset CommandInset href
LatexCommand href
name "https://territoriali.olinfo.it/"
target "https://territoriali.olinfo.it/"
literal "false"

\end_inset

 su cui si possono fare dei test relativi ai problemi dei territoriali degli
 anni precedenti.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Nel caso di risposte non corrette o solo parzialmente corrette, lo studente
 avrà quindi la possibilità di individuare gli errori attraverso l'analisi
 dei casi che non hanno dato una risposta corretta e correggere il proprio
 programma.
 Una volta arrivato a una soluzione soddisfacente, lo studente chiederà
 al sistema un altro file di input, con una serie di test case differenti
 dai precedenti e lo risolverà con il nuovo programma, spedendo il nuovo
 file di output, iterando il processo fino a che arriverà alla soluzione
 del problema (o comunque al massimo di punti che riesce a ottenere).
\end_layout

\begin_layout Standard
In questo modo è possibile fornire allo studente un feedback preciso su
 quanto fatto.
\end_layout

\begin_layout Subsection
Lettura/scrittura da e su file
\end_layout

\begin_layout Standard
Dovendo produrre un file in output partendo da un file di input, che è quello
 che il sistema permette di scaricare, il programma dovrà necessariamente
 gestire questa situazione.
 Questo file, a differenza della modalità precedente, contiene generalmente
 un primo intero T che rappresenta il numero di 
\emph on
test case
\emph default
, dopodichè seguono i dati di input di ognuno dei singoli test case, come
 se i casi che una volta venivano dati su file separati fossero stati tutti
 accodati nello stesso file.
\end_layout

\begin_layout Standard
Per fare un esempio si faccia riferimento al testo del problema 
\begin_inset CommandInset href
LatexCommand href
name "Tornello Olimpico"
target "https://territoriali.olinfo.it/task/tornello"
literal "false"

\end_inset

, di cui qua vengono riportati per brevità solo le definizioni degli input/outpu
t.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Subsubsection*
Dati di input
\end_layout

\begin_layout Plain Layout
La prima riga del file di input contiene un intero 
\series bold
\noun on
T
\series default
\noun default
, il numero di casi di test.
 Seguono 
\series bold
T
\series default
 casi di test, numerati da 1 a T.
 Ogni caso di test è preceduto da una riga vuota.
\end_layout

\begin_layout Plain Layout
Ciascun caso di test è composto da due righe.
 La prima contiene il numero intero 
\series bold
N
\series default
: il numero di segnali ricevuti dal tornello.
 La seconda contiene 
\series bold
N
\series default
 interi (ciascuno uguale a +1 o -1) separati da spazio: la sequenza di segnali
 ricevuti dal tornello.
\end_layout

\begin_layout Subsubsection*
Dati di output
\end_layout

\begin_layout Plain Layout
Il file di output deve contenere la risposta ai casi di test che sei riuscito
 a risolvere.
 Per ogni caso di test che hai risolto, il file di output deve contenere
 una riga con la dicitura
\end_layout

\begin_layout Plain Layout

\family typewriter
Case #t: c
\end_layout

\begin_layout Plain Layout
dove t è il numero del caso di test (a partire da 1) e il valore c è il
 minimo numero di studenti che hanno visitato la stanza.
\end_layout

\begin_layout Subsubsection*
Esempi di input/output 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="2.5in">
<column alignment="left" valignment="top" width="5cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
File input.txt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
File output.txt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
4
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
3
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
-1 -1 -1
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
3
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
+1 +1 +1
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
3
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
+1 -1 +1
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
10
\end_layout

\begin_layout Plain Layout

\family typewriter
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
-1 +1 +1 +1 -1 +1 +1 +1 -1 +1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Case #1: 3 
\end_layout

\begin_layout Plain Layout

\family typewriter
Case #2: 3
\end_layout

\begin_layout Plain Layout

\family typewriter
Case #3: 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
Case #4: 5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto ci sono due possibilità: o gestirsi la lettura/scrittura
 scrivendo il codice da zero oppure utilizzare il 
\emph on
template
\emph default
 messo a disposizione sulla piattaforma di gara.
 Un template non è altro che uno scheletro di programma che contiene già
 tutta la parte di I/O in modo che lo studente possa concentrarsi solo sulla
 soluzione del problema, senza preoccuparsi di dover leggere/scrivere su
 file in maniera corretta.
 Nel caso di questo problema, il template scaricabile dalla piattaforma
 è fatto così:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=lr,language={C++},numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

int solve() {
\end_layout

\begin_layout Plain Layout

    int N;
\end_layout

\begin_layout Plain Layout

    cin >> N;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    int risposta = 0;  // memorizza qui la risposta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for (int i=0; i<N; i++) {
\end_layout

\begin_layout Plain Layout

        int variazione;
\end_layout

\begin_layout Plain Layout

        cin >> variazione;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // aggiungi codice...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return risposta;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

    // se preferisci leggere e scrivere da file
\end_layout

\begin_layout Plain Layout

    // ti basta decommentare le seguenti due righe:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    //freopen("input.txt", "r", stdin);
\end_layout

\begin_layout Plain Layout

    //freopen("output.txt", "w", stdout);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    int T, t;
\end_layout

\begin_layout Plain Layout

    scanf("%d", &T);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for (t = 1; t <= T; t++) {
\end_layout

\begin_layout Plain Layout

        cout << "Case #" << t << ": " << solve() << endl;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si può vedere, la lettura e la scrittura vengono fatte utilizzando
 le solite primitive di I/O: per usare i file anzichè la tastiera/video
 come input/output, è sufficiente decommentare le righe 21-22, che prenderanno
 quindi l'input dal file 
\emph on
input.txt
\emph default
, anzichè da tastiera, e scriveranno l'output sul file 
\emph on
output.txt
\emph default
, anzichè a video.
 Perchè tutto funzioni correttamente serve inoltre che il file di input
 sia posizionato nella cartella corretta, in modo che il programma possa
 leggerlo: la regola generale è che, per come è scritto quel codice, il
 file debba essere posizionato nella stessa cartella dell'eseguibile, poi
 però gli ambienti di sviluppo possono alterare questo comportamento, quindi
 è bene provare a capire come funziona nell'ambiente utilizzato.
\end_layout

\begin_layout Standard
Il mio consiglio è quello di utilizzare sempre il template, poichè si ha
 la sicurezza che l'input/output sono sicuramente corretti, dove, scrivendo
 il codice da zero, non è così improbabile che un errore, anche molto banale,
 possa alterare la lettura o la scrittura portando a un risultato sbagliato
 a fronte di un algoritmo risolutivo scritto correttamente.
 L'unica problematica può essere legata al fatto che nel template si possono
 a volte trovare delle istruzioni che non si comprendono appieno o proprio
 per nulla.
 Ad esempio, nel codice mostrato si può notare che alla riga 25 viene utilizzata
 la funzione 
\emph on
scanf
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Non è chiaro perchè sia stata fatta questa scelta di mescolare due primitive
 di I/O diverse, dovendo tirare a indovinare direi un copia/incolla, comunque
 la garanzia è che il template è sempre corretto.
\end_layout

\end_inset


\emph default
 al posto della solito lettura con 
\emph on
cin
\emph default
, utilizzato invece alle righe 3 e 9.
 Chi non conoscesse il C, ma solo il C++, potrebbe trovare misteriosa quell'istr
uzione, ma probabilmente il contesto è sufficiente per far intuire che lo
 scopo è quello di leggere un intero e scriverlo nella variabile T.
 Inoltre è sempre possibile sostituire alcune parti del template, in modo
 comunque da aver un buon punto di partenza per la scrittura della soluzione
 vera e propria.
\end_layout

\begin_layout Subsection
Esempi di I/O 
\end_layout

\begin_layout Standard
Volendo invece scrivere il programma da zero, verranno adesso mostrati alcuni
 esempi significativi.
 Partiamo dal caso più semplice, che è forse anche il caso più comune di
 lettura nei problemi delle Olimpiadi (anche se con qualche variante), nel
 quale lo schema è quello di avere un numero intero che indica quanti altri
 numeri dovranno poi essere letti nel seguito del file.
 Supponiamo quindi che il problema sia quello di sommare una serie di numeri
 interi e che il file di input contenga come primo intero un valore N che
 indica quanti sono i numeri da sommare: nelle successive N righe
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A volte viene data una formulazione equivalente in cui si dice che gli N
 interi si trovano su una sola linea e sono separati dallo spazio: per quanto
 riguarda l'imput non c'è alcuna differenza, poichè la lettura con 
\emph on
cin
\emph default
 interpreta sia gli spazi che gli 
\emph on
a capo
\emph default
 come separatori.
\end_layout

\end_inset

 ci saranno quindi gli N numeri che dovranno essere sommati per portare
 alla soluzione del problema.
 La lettura avverrebbe quindi in questo modo:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=lr,language={C++},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

ifstream in("input.txt"); 	//in è l'oggetto per gestire l'input
\end_layout

\begin_layout Plain Layout

ofstream out("output.txt");	//out è l'oggetto per gestire l'output
\end_layout

\begin_layout Plain Layout

int N, somma = 0;
\end_layout

\begin_layout Plain Layout

in >> N;		//viene letto il primo numero intero
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < N; i++) //ciclo per leggere gli N numeri seguenti
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int temp;
\end_layout

\begin_layout Plain Layout

	in >> temp;	
\end_layout

\begin_layout Plain Layout

	somma += temp;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

out << somma << endl;	//scrittura del risultato
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si può vedere non ci sono molte differenze da un programma che legge
 i suoi dati da tastiera: ovviamente mancano quelle istruzioni di output
 che solitamente vengono messe per chiarire all'utente quali dati deve inserire,
 in quanto i dati vengono forniti dal correttore secondo quanto definito
 nel testo del problema.
 
\end_layout

\begin_layout Standard
Un altro esempio riguarda la lettura di una o più stringhe: a seconda della
 formulazione dei dati di input a volte viene fornito il numero di caratteri
 che formano la stringa e a volte no, qui supporremo che ci siano ancora
 un numero interno N che rappresenta quante stringhe vanno lette e poi ci
 sono le N stringhe da leggere.
 Supponendo che il problema sia di stampare quella più lunga e che solo
 una abbia questa caratteristica, il programma sarà il seguente:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=lr,language={C++},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

ifstream in("input.txt"); 	//in è l'oggetto per gestire l'input
\end_layout

\begin_layout Plain Layout

ofstream out("output.txt");	//out è l'oggetto per gestire l'output
\end_layout

\begin_layout Plain Layout

int N, stringa_lunga = 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Plain Layout

in >> N;		//viene letto il primo numero intero
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < N; i++) //ciclo per leggere le N stringhe
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	string s;
\end_layout

\begin_layout Plain Layout

	in >> s;	
\end_layout

\begin_layout Plain Layout

	if (s.size() > stringa_lunga.size())
\end_layout

\begin_layout Plain Layout

		stringa_lunga = s;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

out << stringa_lunga << endl;	//scrittura del risultato
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ci sono molte altre formulazione dell'input che si possono trovare nei problemi
 e sarebbe abbastanza inutile affrontarle tutte, su Internet si trovano
 molte risorse rispetto alla lettura dei dati e nei problemi mostrati nel
 seguito della guida verranno comunque trovate varie tipologie che potranno
 essere utilizzate per comprendere meglio l'utilizzo dell'I/O in C++.
 Vale la pena ripetere che, dove presente, è consigliato usare il template
 di gara.
\end_layout

\begin_layout Subsection
Errori comuni
\end_layout

\begin_layout Standard
Durante la gara, per esperienza diretta come organizzatore delle territoriali,
 vengono commessi degli errori banali che però hanno delle conseguenze fatali
 (in senso relativo, nessuno è mai morto a causa di questi errori).
\end_layout

\begin_layout Standard
Finora (anche se la situazione dovrebbe cambiare nei prossimi anni
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Ritengo comunque utile lasciare questa parte in quanto inizialmente molti
 ragazzi hanno Windows come piattaforma di allenamento.
 
\end_layout

\end_inset

) Windows nelle sue varie versioni è stata la piattaforma più utilizzata
 (spesso l'unica) a livello delle selezioni territoriali.
 Alcune sue caratteristiche possono condurre ai seguenti problemi:
\end_layout

\begin_layout Itemize
nelle installazioni normali Windows è configurato per non mostrare le estensioni
 dei file, quindi il file 
\emph on
input.txt
\emph default
 compare a video solo con il nome 
\emph on
input
\emph default
 e con la classica icona dei file di testo.
 Dal punto di vista del vostro programma però il file è sempre 
\emph on
input.txt
\emph default
, il fatto che non si veda l'estensione è solo dovuto a una scelta di usabilità
 per non 
\begin_inset Quotes eld
\end_inset

disturbare
\begin_inset Quotes erd
\end_inset

 gli utenti con poca dimestichezza con il computer (il 90-95%).
 Siccome in gara è necessario creare un file i
\emph on
nput.txt
\emph default
 per testare se il programma scritto funziona, il software che propone Windows
 è il Blocco Note, che però ha un comportamento maligno, sempre a causa
 della scelta di cui sopra: nel momento di salvare il file se si sceglie
 come nome 
\emph on
input.txt
\emph default
 il Blocco Note aggiungerà di suo l'estensione .
\emph on
txt
\emph default
 e il vero nome del file sarà quindi 
\emph on
input.txt.txt
\emph default
.
 Questo farà si che il vostro programma fallirà nell'apertura del file perché
 il file 
\emph on
input.txt
\emph default
 non è presente; però guardando nella cartella si vedrà che c'è un file
 che si chiama 
\emph on
input.txt
\emph default
 (sempre per il discorso che l'estensione non viene mostrata) e quindi si
 inizierà a dare la colpa, nell'ordine, al computer di gara, all'ambiente
 di sviluppo, i più temerari anche al linguaggio di programmazione, mentre
 se sapete queste cose non dovreste avere problemi.
 Inoltre è sempre possibile usare direttamente l'ambiente di sviluppo per
 creare il file 
\emph on
input.txt
\emph default
 oppure abilitare la visualizzazione delle estensioni attraverso il menù
 
\emph on
Opzioni cartella
\emph default
 che si trova in ogni cartella aperta
\end_layout

\begin_layout Itemize
sempre in Windows, i nomi dei file sono 
\emph on
case-insensitive
\emph default
, quindi bisogna essere certi nel proprio codice sorgente di indicare i
 nomi dei file con tutte le lettere minuscole, perché se ad esempio si scrivesse
 
\series bold
\emph on
I
\series default
nput.txt
\emph default
, il programma funzionerebbe se testato sotto Windows, ma fallirebbe se
 testato con Linux (nel quale i file system sono 
\emph on
case-sensitive
\emph default
).
 Siccome dalle territoriali in poi e in tutte le gare online il correttore
 gira sotto Linux, è bene abituarsi a scrivere i nomi dei file in minuscolo
\end_layout

\begin_layout Itemize
il file 
\emph on
input.txt
\emph default
 che verrà creato per fare delle prove deve trovarsi in una posizione per
 cui il vostro programma lo riesca ad aprire, quindi non può essere messo
 dove capita, ma solo in alcuni posti.
 Siccome il correttore si aspetta che il file sia nella stessa cartella
 dell'eseguibile, il programma lo cerca nella cartella dove è in esecuzione:
 gli ambienti di sviluppo di gara in generale permettono anche di metterlo
 nella stessa cartella del codice sorgente, quindi vale la pena di fare
 un po' di prove per capire esattamente dove posizionarlo e evitare di scoprire
 durante la gara che il file non viene letto perché il programma non riesce
 a trovarlo.
\end_layout

\begin_layout Subsection
Utilizzo di Linux
\end_layout

\begin_layout Standard
Dall'edizione 2014-2015 l'organizzazione nazionale ha invitato le sedi territori
ali che avevano la possibilità di farlo
\begin_inset Foot
status open

\begin_layout Plain Layout
Va comunque verificato cosa verrà usato nella propria sede di gara, poichè
 l'utilizzo di Linux dipende dal regolamento corrente e quindi potrebbero
 esserci differenze tra una sese e un'altra.
\end_layout

\end_inset

 a proporre agli studenti il sistema operativo Linux, con la suite di compilazio
ne 
\emph on
gcc/g++
\emph default
 e i normali strumenti di programmazione (CodeBlocks, Geany, Vim, ecc.),
 come piattaforma di gara.
 Per uniformità tra le varie sedi e nel tentativo di creare il minor disagio
 possibile agli organizzatori si è optato per utilizzare una macchina virtuale
 VirtualBox, basata sulla distribuzione Ubuntu.
\end_layout

\begin_layout Standard
Questa nuova modalità, almeno per quanto riguarda le selezioni territoriali,
 non ha un forte impatto sulla conduzione della gara, in quanto la maggior
 parte degli allievi, nella mia esperienza, usano CodeBlocks come avrebbero
 fatto su un sistema Windows e si limitano a usare i normali strumenti grafici
 di gestione dei file per tutte le operazioni che coinvolgono spostamento/copia/
cancellazione di file.
\end_layout

\begin_layout Standard
Chiaramente chi volesse potrebbe anche pensare di approfondire la propria
 conoscenza di questo ambiente e dei vari strumenti, da linea di comando
 e non solo, che le distribuzioni Linux normalmente metteno a disposizione
 e che possono essere utilizzati per alcune attività 
\begin_inset Quotes eld
\end_inset

collaterali
\begin_inset Quotes erd
\end_inset

 (ad esempio creazione di casi di test di grandi dimensioni).
 La mia opinione è che, nel caso si sia obbligati oppure si voglia utilizzare
 Linux, è assolutamente indispensabile provarlo prima per avere una competenza
 minima prima della gara, lasciando ulteriori approfondimenti dopo l'eventuale
 passaggio alla finale nazionale.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Subtask-e-template"

\end_inset

Subtask
\end_layout

\begin_layout Standard
Un'altra novità che è stata aggiunta negli ultimi anni è quella di dividere
 i casi di test in una serie di gruppi denominati 
\series bold
subtask
\series default
.
 Sebbene a livello delle territoriali questo non sia stato ancora fatto,
 sapere cosa sono può essere interessante poichè moltissimi dei problemi
 a disposizione per allenarsi sul correttore contengono subtask, le ultime
 edizioni delle Olimpiadi a squadre contengono problemi strutturati in questo
 modo e le finali nazionali e internazionali delle Olimpiadi sono strutturate
 usando questa modalità.
\end_layout

\begin_layout Standard
Un problema contiene normalmente 5-6 subtask, ognuno dei quali è formato
 da una serie di casi di test che hanno delle caratteristiche in comune,
 tipicamente delle limitazioni sulle dimensioni o sul tipo dei dati di input.
 Il punteggio a questo punto non è più dato in base al numero di casi di
 test che vengono risolti, ma per ogni subtask vengono dati una serie di
 punti 
\emph on
solo se
\emph default
 tutti i casi del subtask vengono risolti correttamente.
 Può quindi capitare che, dato un subtask contenente ad esempio 5 casi di
 test, 4 di essi siano risolti correttamente e 1 no, e quindi i punti assegnati
 siano 0.
\end_layout

\begin_layout Standard
La differenza sostanziale è che, essendo i subtask relativi a certe limitazioni
 particolari, ci si può concentrare a risolvere solo alcuni casi del problema,
 evitando di cercare la soluzione completa del problema.
 In molti casi questa può essere una condotta di gara più fruttuosa, soprattutto
 se si riesce fin da subito a valutare la difficoltà della soluzione generale
 del problema e invece la relativa facilità nella soluzione di alcuni subtask.
\end_layout

\begin_layout Section
Le funzioni
\end_layout

\begin_layout Standard
In questo paragrafo si farà un breve ripasso sull'utilizzo delle funzioni,
 che, anche se non strettamente necessarie (se non nella ricorsione), sono
 estremamente utili nella stesura di codice modulare, caratteristica sicuramente
 desiderabile anche nella scrittura di programmi di piccole dimensioni.
 Quello che verrà mostrato sarà inerente all'utilizzo che viene fatto delle
 funzioni durante le gare e quindi saranno volutamente omessi dettagli su
 altre modalità di utilizzo che non trovano applicazione nelle Olimpiadi.
\end_layout

\begin_layout Standard
Il concetto di 
\emph on
funzione
\emph default
 è simile a quello che viene presentato in matematica o in altri campi scientifi
ci, però siccome non tutti i lettori potrebbero averlo presente, verrà presentat
o a un livello più intuitivo.
 
\end_layout

\begin_layout Standard
L'idea di base è quella di raggruppare in un solo punto il codice necessario
 per eseguire un compito specifico (trovare la radice quadrata di un numero,
 fare il totale di una fattura, stampare un biglietto aereo, ecc.) e isolarlo
 dal resto del programma, in modo da ottenere una suddivisione dei compiti
 tra pezzi di codice 
\begin_inset Quotes eld
\end_inset

specializzati
\begin_inset Quotes erd
\end_inset

, utilizzabili in qualunque punto del programma.
 I principali vantaggi delle funzioni sono quindi:
\end_layout

\begin_layout Itemize
ogni funzione può essere sviluppata indipendentemente dal resto del codice
 e testata separatamente
\end_layout

\begin_layout Itemize
posso riutilizzare algoritmi comuni attraverso la creazione di librerie
 di funzione (che di fatto è quello che avviene nella libreria del C++)
\end_layout

\begin_layout Itemize
il programma nel suo complesso diventa più facile da sviluppare e mantenere,
 poichè non è più una lunga sequenza di istruzioni di basso livello, ma
 l'insieme di chiamate di funzioni che svolgono operazioni a un livello
 di astrazione più elevato.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../materiali/funzioni/disegno funzione.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:disegno funzione"

\end_inset

Rappresentazione generale di una funzione
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una rappresentazione grafica del concetto di funzione può essere vista in
 figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:disegno funzione"

\end_inset

, dove, al contrario di come spesso viene disegnata in altri contesti, la
 funzione è una 
\begin_inset Quotes eld
\end_inset

scatola nera
\begin_inset Quotes erd
\end_inset

 che riceve degli input (In
\begin_inset Formula $_{\text{1}}$
\end_inset

, In
\begin_inset Formula $_{\text{2}}$
\end_inset

, \SpecialChar ldots
, In
\begin_inset Formula $_{\text{n}}$
\end_inset

) a destra e fornisce in uscita un output Out, mostrato a sinistra.
 La scelta di porre gli input a destra e gli output a sinistra deriva dall'analo
gia con la sintassi effettiva delle funzioni nei linguaggi C/C++ (e in molti
 altri), in cui gli input, chiamati 
\emph on
parametri
\emph default
, si trovano a destra del nome della funzione e l'output, chiamato 
\emph on
valore di ritorno
\emph default
, si trova a sinistra del nome di funzione.
 Quella rappresentata è la forma più generale di funzione, poi può essere
 che alcune funzioni non abbiano parametri o valore di ritorno o manchino
 di entrambi.
\end_layout

\begin_layout Standard
Sintatticamente una funzione viene definita nel seguente modo:
\end_layout

\begin_layout Quotation

\emph on
valore_di_ritorno nome_funzione(lista_dei_parametri)
\end_layout

\begin_layout Standard
dove:
\end_layout

\begin_layout Description
valore_di_ritorno: può essere 
\emph on
void
\emph default
, se non presente nessun valore di ritorno, oppure un qualsiasi tipo di
 dato elementare (int, char, float, ecc.) o definito dall'utente (struttura
 o classe)
\end_layout

\begin_layout Description
nome_funzione: è un qualsiasi identificatore valido (come i nomi di variabili)
 che indica la semantica della funzione, cioè il suo scopo
\end_layout

\begin_layout Description
lista_di_parametri: una lista di variabili, elencate con tipo e nome, separate
 da virgola
\end_layout

\begin_layout Standard
Per comprenderne meglio il significato ricorriamo a un esempio semplicissimo:
 supponiamo di voler sapere quale sia il massimo tra due numeri interi inseriti
 dall'utente.
 Un codice possibile
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Il codice è volutamente 
\begin_inset Quotes eld
\end_inset

didattico
\begin_inset Quotes erd
\end_inset

 per evidenziare alcuni aspetti legati al passaggio di parametri, un'implementaz
ione più realistica utilizzerebbe una sola riga di codice.
\end_layout

\end_inset

 per raggiungere lo scopo è quello presentato di seguito:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,frame=lr,language=C,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

int massimo(int r, int s)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int max;
\end_layout

\begin_layout Plain Layout

	if (r > s)
\end_layout

\begin_layout Plain Layout

		max = r;
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		max = s;
\end_layout

\begin_layout Plain Layout

	return max;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int a, b, c;
\end_layout

\begin_layout Plain Layout

	in >> a >> b;
\end_layout

\begin_layout Plain Layout

	c = massimo(a, b);
\end_layout

\begin_layout Plain Layout

	cout << 
\begin_inset Quotes eld
\end_inset

Il massimo è 
\begin_inset Quotes eld
\end_inset

 << c << endl;
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si può vedere dalla figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Passaggio-di-parametri"

\end_inset

 nel programma principale, all'interno del 
\emph on
main
\emph default
, compaiono tre variabili locali, 
\emph on
a
\emph default
, 
\emph on
b
\emph default
 e 
\emph on
c
\emph default
, e i valori delle prime due vengono inseriti dall'utente tramite le solite
 funzioni di input.
 Alla riga 15 il programma principale chiama la funzione 
\emph on
massimo
\emph default
, passando come parametri le variabili 
\emph on
a
\emph default
 e 
\emph on
b
\emph default
 (passaggio 1 in figura).
 Questo fa si che i valori contenuti in 
\emph on
a
\emph default
 e 
\emph on
b
\emph default
 vengano copiati all'interno dei parametri formali 
\emph on
r
\emph default
 e 
\emph on
s
\emph default
, che sono a tutti gli effetti delle variabili contenute 
\begin_inset Quotes eld
\end_inset

all'interno
\begin_inset Quotes erd
\end_inset

 della funzione 
\emph on
massimo
\emph default
.
 Questa funzione esegue quindi le operazioni sui valori passati e inserisce
 il risultato all'interno della variabile 
\emph on
max
\emph default
, che viene poi 
\begin_inset Quotes eld
\end_inset

ritornata
\begin_inset Quotes erd
\end_inset

 tramite l'istruzione alla riga 8 (passaggio 2 in figura).
 Il valore ritornato viene poi assegnato alla variabile 
\emph on
c
\emph default
, che come già detto è locale al 
\emph on
main
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../materiali/funzioni/passaggio parametri.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Passaggio-di-parametri"

\end_inset

Passaggio di parametri per copia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Questo semplice schema può essere usato in moltissime situazioni, ne esistono
 però altre dove non è possibile cavarsela allo stesso modo, basti pensare
 ad esempio a una funzione che faccia l'ordinamento di un vettore o la ricerca
 del minimo in una matrice: in questi esempi difatti dover passare un vettore
 o una matrice a una funzione richiede di comprendere alcuni concetti legati
 agli indirizzi e ai puntatori che in generale risultano poco intuitivi
 e che, se usati male, portano a degli errori difficili da individuare.
 Nelle gare quindi si risolve il problema in un modo che, seppure possa
 risultare indigesto agli ingegneri del software, permette di gestire i
 casi indicati (e altri simili) in modo indolore.
 Il 
\begin_inset Quotes eld
\end_inset

trucco
\begin_inset Quotes erd
\end_inset

 è quello di lavorare direttamente con le 
\emph on
variabili globali
\emph default
, che, proprio per questa loro caratteristica, vengono viste da tutte le
 funzioni, le quali possono agire direttamente su di esse, senza bisogno
 di ricorrere al passaggio dei parametri, come mostrato nel codice seguente:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,frame=lr,language=C,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

const int N = 5;
\end_layout

\begin_layout Plain Layout

int V[N];
\end_layout

\begin_layout Plain Layout

int somma()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int s = 0;
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < N; i++)
\end_layout

\begin_layout Plain Layout

		s += V[i];
\end_layout

\begin_layout Plain Layout

	return max;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int c;
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < N; i++)
\end_layout

\begin_layout Plain Layout

		cin >> V[i];
\end_layout

\begin_layout Plain Layout

	c = somma();
\end_layout

\begin_layout Plain Layout

	cout << "La somma degli elementi del vettore è 
\begin_inset Quotes eld
\end_inset

 << c << endl;
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si vede esiste un vettore globale 
\emph on
V
\emph default
, di lunghezza 5, che viene visto sia dal 
\emph on
main
\emph default
 che dalla funzione 
\emph on
somma
\emph default
, le quali lo utilizzano per valorizzarlo (il 
\emph on
main
\emph default
) e per calcolarne la somma, senza che la funzione 
\emph on
somma
\emph default
 abbia bisogno del passaggio di parametri
\begin_inset Foot
status open

\begin_layout Plain Layout
Si vedrà più avanti che l'utilizzo delle variabili globali comporta altri
 vantaggi che fanno si che l'uso in gara sia altamente consigliato.
\end_layout

\end_inset

.
\end_layout

\end_body
\end_document
